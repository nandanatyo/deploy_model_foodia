FROM python:3.8-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    gfortran \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libatlas-base-dev \
    libblas-dev \
    liblapack-dev \
    python3-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create a requirements.txt file with all dependencies explicitly listed
RUN echo "numpy==1.19.2\n\
Pillow==8.2.0\n\
tensorflow-cpu==2.5.0\n\
Keras==2.4.3\n\
typing-extensions==3.7.4.3\n\
Werkzeug==2.0.1\n\
flask==2.0.0\n\
flask-cors==3.0.10\n\
gunicorn==20.1.0\n\
pandas==1.3.0\n\
imutils==0.5.4\n\
matplotlib==3.4.3\n\
nltk==3.6.3\n\
regex\n\
scikit-learn==0.24.2\n\
scipy==1.6.3\n\
joblib==1.0.1\n\
threadpoolctl==2.1.0\n\
opencv-python==4.6.0.66\n\
protobuf==3.17.0\n\
cython\n\
lmdb\n\
pyclipper\n\
shapely\n\
imgaug\n\
pycryptodome\n\
paddlepaddle==2.4.2\n\
paddleocr==2.6.0.3" > requirements.txt

# Install all dependencies at once
RUN pip install --no-cache-dir -r requirements.txt

# Download NLTK data
RUN python -c "import nltk; nltk.download('stopwords')"

# Create directories
RUN mkdir -p predicted_results images templates

# Copy model files
COPY bilstm_model2.h5 save_label_encoder2.pkl save_tokenizer2.pkl ./
COPY images/ images/
COPY templates/ templates/

# Copy application code
COPY app.py img_to_txt_ocr.py model.py ./

EXPOSE 8080
ENV PORT=8080

CMD ["sh", "-c", "exec gunicorn --bind :$PORT --workers 1 --threads 8 --timeout 0 app:app"]