# Dockerfile.gcp - Optimized for Google Cloud Platform deployment
FROM python:3.8-slim

# Set working directory
WORKDIR /app

# Install system dependencies for OpenCV and scientific Python packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    gfortran \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libatlas-base-dev \
    libblas-dev \
    liblapack-dev \
    python3-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy only requirements file first to leverage Docker cache
COPY requirements.txt .

# Install Python packages with focus on resolving dependency conflicts
# Install packages in specific order to avoid conflicts
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir wheel && \
    # Install core scientific packages separately
    pip install --no-cache-dir numpy==1.23.5 && \
    # Install opencv-python at a version compatible with paddleocr
    pip install --no-cache-dir opencv-python==4.6.0.66 && \
    # Install tensorflow separately (large package)
    pip install --no-cache-dir tensorflow>=2.8.0 && \
    # Install remaining packages in logical groups
    pip install --no-cache-dir flask>=2.0.0 pandas>=1.3.0 imutils>=0.5.4 && \
    pip install --no-cache-dir matplotlib>=3.4.3 nltk>=3.6.3 scikit-learn>=0.24.2 && \
    pip install --no-cache-dir paddlepaddle>=2.2.0 && \
    pip install --no-cache-dir paddleocr>=2.4.0 && \
    # Install gunicorn for production serving
    pip install --no-cache-dir gunicorn>=20.1.0

# Create directories for predictions and images (do this before copying files)
RUN mkdir -p predicted_results images templates

# Copy application code - separate frequently changing files from stable ones
# Copy stable files first (less likely to change)
COPY bilstm_model2.h5 save_label_encoder2.pkl save_tokenizer2.pkl ./
COPY images/ images/
COPY templates/ templates/

# Copy code files last (most likely to change)
COPY app.py img_to_txt_ocr.py model.py ./

# Make port 8080 available (Cloud Run default)
EXPOSE 8080

# Define environment variable for port
ENV PORT=8080

# Command to run the application with optimized settings for Cloud Run
CMD ["sh", "-c", "exec gunicorn --bind :$PORT --workers 1 --threads 8 --timeout 0 app:app"]